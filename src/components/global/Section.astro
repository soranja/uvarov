---

interface Props {
    id: string,
    sectionClass?: string,
    extraClass?: string,
    fixedWrapperClass?: string,
    w?: string,
    h?:string
    maxH?: string,
    isFixed?: boolean
};

const { 
    id, 
    extraClass = "",
    sectionClass = "section relative w-full h-[1024px] border-4 border-blue-500",
    fixedWrapperClass = "fixed-wrapper mx-auto border-4 border-red-500",
    isFixed = false,
    // maxW = 'w-[90%]',
    maxH = 'max-h-[750px] top-[15vh] 4xl:top-[10vh]',
    w = 'w-[1250px]',
    h = 'h-[750px]',
} = Astro.props;

---

<section 
    id={id} class=`${sectionClass}`>
    <div class={`${h} ${w} ${maxH} ${fixedWrapperClass} ${isFixed ? "fixed" : 'relative'} ${extraClass}`}>
        <slot />
    </div>
</section>

<script>
    
    // SECTIONS OBSERVER
    const sections = document.querySelectorAll('.section');
    const sectionsObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            const wrapper = entry.target.querySelector('.fixed-wrapper');
            if(wrapper) {
                if (entry.isIntersecting) {
                    wrapper.classList.add('show');

                } else {
                    wrapper.classList.remove('show');
                }
            }
        });
    }, { threshold: [0.5, 0.7] });

    sections.forEach((section) => sectionsObserver.observe(section));
</script>

<style is:global>

    .fixed-wrapper {
        opacity: 0;
        z-index: 0;
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }
    .show {
        opacity: 1;
        z-index: 10;
    }
</style>