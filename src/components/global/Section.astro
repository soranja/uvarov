---

interface Props {
    id: string,
    sectionClass?: string,
    extraClass?: string,
    fixedWrapperClass?: string,
    w?: string,
    h?:string
    maxH?: string,
    isFixed?: boolean
};

const { 
    id, 
    extraClass = "",

    sectionClass = "section relative w-full h-screen flex items-end border-4 border-blue-500",
    fixedWrapperClass = "fixed-wrapper inset-x-0 mx-auto border-4 border-red-500",
    isFixed = false,

    w = 'w-[87%]',
    h = 'h-[89vh]',
    
} = Astro.props;

---

<section 
    id={id} class=`${sectionClass}`>
    <div class={`${h} ${w} ${fixedWrapperClass} ${isFixed ? "fixed" : 'relative'} ${extraClass}`}>
        <slot />
    </div>
</section>

<script>
    // SECTIONS OBSERVER

    // all sections with the corresponding class picked
    const sections = document.querySelectorAll('.section') as NodeListOf<HTMLElement>; 

    // sections to crossfade + custom threshhold (null - default [0.5 - 0.7])
    const crossfadeSections: { [sectionId: string]: number | null } = {
        'hersones-wall': 0.2,
        'chapter-intro': null,
        'graf': null,
    };

    // function to get the threshold based on the section's ID
    function getSectionThreshold(section: HTMLElement): number | number[] {
        const sectionId = section.id;
        return crossfadeSections[sectionId] ?? [0.5, 0.7];
    }
    

    sections.forEach((section: HTMLElement) => {
        const sectionId = section.id;

        // check if the section should have a crossfade effect
        const hasCrossfade = crossfadeSections.hasOwnProperty(sectionId);

        if (hasCrossfade) {
            const threshold = getSectionThreshold(section);

            const sectionsObserver = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    const wrapper = entry.target.querySelector('.fixed-wrapper') as HTMLElement;
                    if (wrapper) {
                        if (entry.isIntersecting) {
                            wrapper.classList.add('show');
                        } else {
                            wrapper.classList.remove('show');
                        }
                    }
                });
            }, { threshold });

            sectionsObserver.observe(section);
        } else {
            // if the section does not have a crossfade, ensure it remains visible
            const wrapper = section.querySelector('.fixed-wrapper') as HTMLElement;
            if (wrapper) {
                wrapper.style.opacity = '1';
                wrapper.style.zIndex = '5';
            }
        }
    });
</script>

<style is:global>
    .fixed-wrapper {
        opacity: 0;
        z-index: 0;
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }
    .show {
        opacity: 1;
        z-index: 10;
    }
</style>