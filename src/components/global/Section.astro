---
import { getCurrentChapter } from "../../utils/currentChapter.astro";
const currentChapter = getCurrentChapter(Astro);

interface Props {
    id: string,
    sectionClass?: string,
    extraClass?: string,
    bgChapter?: string,
    fixedWrapperClass?: string,
    bgClass?: string
};

const { 
    id, 
    bgClass = `bg-${currentChapter?.id}-bg` || 'none',
    bgChapter = "",
    extraClass = "",
    sectionClass = "section relative w-full min-h-screen grid place-items-center content-center section border-4 border-green-500",
    fixedWrapperClass = "fixed-wrapper fixed top-0 left-0 w-full h-screen bg-cover bg-no-repeat transform-all duration-1000 ease-in-out flex flex-col justify-center items-center",
} = Astro.props;

// const bgClass = ;
const finalBg = bgChapter ? bgChapter : bgClass;
---

<section 
    id={id} class=`${sectionClass}`>
    <div class=
    {`
        ${finalBg}
        ${fixedWrapperClass}
        ${extraClass}
    `}>
        <div class="fixed w-[1440px] h-screen border-4 border-red-500"></div>
        <slot />
    </div>
</section>

<script>
    
    // SECTIONS OBSERVER
    const sections = document.querySelectorAll('.section');
    const sectionsObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            const wrapper = entry.target.querySelector('.fixed-wrapper');
            if(wrapper) {
                if (entry.isIntersecting) {
                    wrapper.classList.add('show');

                } else {
                    wrapper.classList.remove('show');
                }
            }
        });
    }, { threshold: 0.6 });

    sections.forEach((section) => sectionsObserver.observe(section));
</script>

<style>
    .section {
    }
    .fixed-wrapper {
        opacity: 0;
        z-index: 0;
    }
    .show {
        opacity: 1;
        z-index: 10;
    }
</style>