---

interface Props {
    id: string,
    sectionClass?: string,
    extraClass?: string,
    fixedWrapperClass?: string,
    w?: string,
    h?:string
    maxH?: string,
    isFixed?: boolean
};

const { 
    id, 
    extraClass = "",
    sectionClass = "section relative w-full h-[1024px] 4xl:h-[2048px] flex items-center 4xl:items-start 4xl:pt-[10vh]",
    fixedWrapperClass = "fixed-wrapper inset-x-0 mx-auto",
    isFixed = false,
    maxH = '',
    w = 'w-[1250px]',
    h = '',
} = Astro.props;

---

<section 
    id={id} class=`${sectionClass}`>
    <div class={`${h} ${w} ${maxH} ${fixedWrapperClass} ${isFixed ? "fixed" : 'relative'} ${extraClass}`}>
        <slot />
    </div>
</section>

<script>
    
    // SECTIONS OBSERVER
    const sections = document.querySelectorAll('.section');

    const thresholdByIdMap: { [key: string]: number } = {
    'hersones-wall': 0.2,
    };

    // Function to get the threshold based on the section's ID
    function getSectionThreshold(section: Element): number | number[] {
    const sectionId = section.id;
    return thresholdByIdMap[sectionId] || [0.5, 0.7];
    }

    sections.forEach((section) => {
    const threshold = getSectionThreshold(section);
    
    const sectionsObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
        const wrapper = entry.target.querySelector('.fixed-wrapper');
        if (wrapper) {
            if (entry.isIntersecting) {
            wrapper.classList.add('show');
            } else {
            wrapper.classList.remove('show');
            }
        }
        });
    }, { threshold });

    sectionsObserver.observe(section);
    });
</script>

<style is:global>

    .fixed-wrapper {
        opacity: 0;
        z-index: 0;
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }
    .show {
        opacity: 1;
        z-index: 10;
    }
</style>